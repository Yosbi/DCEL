@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Models;
@inject IJSRuntime JsRuntime;

<div class=".container-fluid" >
    <div class="row" style='height:@((M + 30)+"px")'>
        <div class="col-lg-8" style="padding:0px!important; overflow: scroll;">

            <div id="canvasHolder" style=" background-color: white;">
                <div class="row">
                    <div class="col" style="padding:0px!important;margin-bottom:20px; ">
                        <div class="row align-items-start" style="height: @( (M/3)+"px"); margin:5px">
                            <div class="col" style="padding:0px">
                                <h6 style="text-align:right">@M</h6>
                            </div>
                        </div>
                        <div class="row align-items-center" style="height: @( (M/3)+"px"); margin:5px">
                            <div class="col" style="padding:0px">
                                <h6 style="text-align:right">@(M/2)</h6>
                            </div>
                        </div>
                        <div class="row align-items-end" style="height: @( (M/3)+"px"); margin:5px">
                            <div class="col" style="padding:0px">
                                <h6 style="text-align:right">0</h6>
                            </div>
                        </div>
                    </div>
                    <div class="col-11" style="padding:0px!important;width:@(M + "px")">

                        <div class="row" style='margin: 0px !important; background-color: magenta; width: @(M + "px"); height: @(M+"px")'>
                            <BECanvas Width="600" Height="600" @ref="_canvasReference"></BECanvas>
                        </div>
                        <div class="row" style="margin:0px!important;width:@(M + "px")">
                            <div class="col" style="padding:0px!important"><h6 style="text-align:left">0</h6></div>
                            <div class="col" style="padding:0px!important"><h6 style="text-align:center">@(M/2)</h6></div>
                            <div class="col" style="padding:0px!important"> <h6 style="text-align:right">@M</h6></div>
                        </div>
                    </div>

                </div>

            </div>


        </div>
        <div class="col-lg-4">

            <div class="row form-group">
                <div class="col-5">
                    <h6>X:</h6>
                </div>
                <div class="col-7">
                    <input type="number" @bind-value="@pointX" />
                </div>
            </div>

            <div class="row form-group">
                <div class="col-5">
                    <h6>Y:</h6>
                </div>
                <div class="col-7">
                    <input type="number" @bind-value="@pointY" />
                </div>
            </div>

            <div class="row form-group">
                <div class="col-5">

                </div>
                <div class="col-7">
                    <button @onclick="AddOnePointClick" style="width:100px">
                        Add Vertex
                    </button>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-5 center-text"></div>
                <div class="col-7 center-text">
                    <button @onclick="ResetClick" style="width:100px">
                        Reset All
                    </button>
                </div>
            </div>
            

           
            <div class="row form-group">
                <div class="col-5 center-text"><h6>Value of M (max 1500):</h6></div>
                <div class="col-7">
                    <input type="number" @bind-value="@tempM" />
                </div>
            </div>
            
            <div class="row form-group">
                <div class="col-5 center-text"></div>
                <div class="col-7 center-text">
                    <button @onclick="ResizeClick" style="width:100px">
                        Resize
                    </button>
                </div>
            </div>



        </div>
    </div>
    <br />
    
    <br />
    
    <div class="row ">

        <div class="col-8 border">
            <h3 style="text-align:center">DCEL</h3>
            <div class="row justify-content-center">
                <div class="col-2">

                    <h4>Vertices:</h4>
                    <div class="table-wrapper-scroll-y">
                        <table class="table-wrapper-scroll-y table-bordered table-striped mb-0">
                            <tr class="bg-light">
                                <th>Vertex</th>
                                <th>Position</th>
                                <th>Edge</th>
                            </tr>
                            @foreach (var vertex in Field.DCEL.Vertices)
                            {
                                <tr>
                                    <td>
                                        <h6 style="text-align:center">@vertex.Tag</h6>
                                    </td>
                                    <td>
                                        <h6 style="text-align:center">@vertex.X , @vertex.Y</h6>
                                    </td>
                                    <td>
                                        <h6 style="text-align:center">@(vertex.IncidentEdge != null ? vertex.IncidentEdge.Tag: "null")</h6>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>

                <div class="col-2">
                    <h4>Faces:</h4>
                    <div class="table-wrapper-scroll-y">
                        <table class="table-wrapper-scroll-y table-bordered table-striped mb-0">
                            <tr class="bg-light">
                                <th>Face</th>
                                <th>Edge</th>
                            </tr>
                            @foreach (var face in Field.DCEL.Faces)
                            {
                                <tr>
                                    <td>
                                        <h6 style="text-align:center">@face.Tag</h6>
                                    </td>
                                    <td>
                                        <h6 style="text-align:center">@(face.Edge != null ? face.Edge.Tag : "null")</h6>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>

                <div class="col-4 ">
                    <h4>Edges:</h4>
                    <div class="table-wrapper-scroll-y">
                        <table class="table-wrapper-scroll-y table-bordered table-striped mb-0">
                            <tr class="bg-light">
                                <th>Half-edge</th>
                                <th>Origin</th>
                                <th>Twin</th>
                                <th>IncidentFace</th>
                                <th>Next</th>
                                <th>Previous</th>
                            </tr>
                            @foreach (var edge in Field.DCEL.HalfEdges)
                            {
                                <tr>
                                    <td>
                                        <h6 style="text-align:center">@edge.Tag</h6>
                                    </td>
                                    <td>
                                        <h6 style="text-align:center">@(edge.Origin != null ? edge.Origin.Tag : "null")</h6>
                                    </td>
                                    <td>
                                        <h6 style="text-align:center">@(edge.Twin != null ? edge.Twin.Tag : "null")</h6>
                                    </td>
                                    <td>
                                        <h6 style="text-align:center">@(edge.IncidentFace != null ? edge.IncidentFace.Tag : "null")</h6>
                                    </td>
                                    <td>
                                        <h6 style="text-align:center">@(edge.Next != null ? edge.Next.Tag : "null")</h6>
                                    </td>
                                    <td>
                                        <h6 style="text-align:center">@(edge.Prev != null ? edge.Prev.Tag : "null")</h6>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-4 border">
            <div class="row justify-content-center">
                <div class="col">
                    <h4 style="text-align:center">Vertices CCW</h4>
                    <div class="table-wrapper-scroll-y">
                        <table class="table-wrapper-scroll-y table-bordered table-striped mb-0">
                            <tr class="bg-light">
                                <th>Vertex</th>
                                <th>Position</th>
                            </tr>
                            @foreach (var vertex in Field.DCEL.GetCCWComposingVertices())
                            {
                                <tr>
                                    <td>
                                        <h6 style="text-align:center">@vertex.Tag</h6>
                                    </td>
                                    <td>
                                        <h6 style="text-align:center">@vertex.X , @vertex.Y</h6>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    private Models.Field Field = new Models.Field();

    private int     tempM   = 600;
    private int     M       = 600;
    private double  pointX  = 0;
    private double  pointY  = 0;
    private int     renderNumber = 0;

    private Canvas2DContext ctx;
    protected BECanvasComponent _canvasReference;

    //----------------------------------------------------------------------
    // Name: OnAfterRenderAsync
    // Desc: function called after the rendering of the page, used as a
    //       constructor
    //----------------------------------------------------------------------
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.ctx = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await JsRuntime.InvokeVoidAsync("resizeCanvasOnDemand", M);
        await base.OnInitializedAsync();
    }

    //----------------------------------------------------------------------
    // Name: ResetClick
    // Desc: Function called from the button of "reset"
    //----------------------------------------------------------------------
    private void ResetClick()
    {
        Field = new Models.Field();
    }

    //----------------------------------------------------------------------
    // Name: ResizeClick
    // Desc: Function called from the button of "resize"
    //----------------------------------------------------------------------
    private void ResizeClick()
    {
        if (tempM > 1500) tempM = 1500;
        if (tempM < 1) tempM = 1;
        M = tempM;
        JsRuntime.InvokeVoidAsync("resizeCanvasOnDemand", M);
        Field = new Models.Field();
    }

    //----------------------------------------------------------------------
    // Name: AddOnePointClick
    // Desc: Function called from the button of "add one vertex"
    //----------------------------------------------------------------------
    private void AddOnePointClick()
    {

        if (pointX < M && pointY < M)
        {
            Field.AddVertex((int)pointX, (int)pointY);
            RenderInBlazor();
        }
        pointX = 0;
        pointY = 0;
    }

    private DateTime LastRender;

    //----------------------------------------------------------------------
    // Name: UpdateTable
    // Desc: Each time a point is inserted, we need to call to StateHasChanged
    //       to refresh the tables of DCEL and CCW after a vertex has been
    //       inserted
    //----------------------------------------------------------------------
    [JSInvokable]
    public void UpdateTable()
    {
        StateHasChanged();
    }

    //----------------------------------------------------------------------
    // Name: ResizeInBlazor
    // Desc: Called when the canvas is resized
    //----------------------------------------------------------------------
    [JSInvokable]
    public void ResizeInBlazor(double width, double height)
    {
        Console.WriteLine("ResizeInBlazor M: " + M.ToString());
        Field.Resize(M, M);
    }

    //----------------------------------------------------------------------
    // Name: AddOnePoint
    // Desc: Function called on mouse click, with the position of the mouse
    //       click on the canvas
    //----------------------------------------------------------------------
    [JSInvokable]
    public void AddOnePoint(double x, double y)
    {
        Field.AddVertex((int)x, ((int)y - M) * -1);
        RenderInBlazor();
    }

    //----------------------------------------------------------------------
    // Name: RenderInBlazor
    // Desc: Renders the canvas (the graphic)
    //----------------------------------------------------------------------
    [JSInvokable]
    public void RenderInBlazor()
    {
        this.ctx.BeginBatchAsync();

        this.ctx.ClearRectAsync(0, 0, Field.Width, Field.Height);
        this.ctx.SetFillStyleAsync("#DDDDDD");
        this.ctx.FillRectAsync(0, 0, Field.Width, Field.Height);

        Console.WriteLine("hello");
        if (renderNumber < 3)
        {
            this.ctx.SetFontAsync("26px Segoe UI");
            this.ctx.SetFillStyleAsync("#000000");
            this.ctx.FillTextAsync("Click on this shaded area to add a vertex", 80, 300);
            renderNumber++;
        }

        foreach (var edge in Field.DCEL.HalfEdges)
        {
            if (edge.Origin != null && edge.Next != null && edge.Next.Origin != null)
            {
                if (Field.DCEL.Vertices.Count < 3 || edge.Twin.IncidentFace.Tag != 0)
                {
                    this.ctx.BeginPathAsync();

                    if (edge.IncidentFace.Tag == 0)
                    {
                        this.ctx.SetStrokeStyleAsync("#000000");
                        this.ctx.SetLineWidthAsync(2);
                    }
                    else
                    {
                        this.ctx.SetStrokeStyleAsync("#FF0000");
                        this.ctx.SetLineWidthAsync(1);
                    }
                    this.ctx.MoveToAsync(edge.Origin.X, (edge.Origin.Y - M) * -1);
                    this.ctx.LineToAsync(edge.Next.Origin.X, (edge.Next.Origin.Y - M) * -1);

                    this.ctx.StrokeAsync();
                }
            }
        }

        foreach (var vertex in Field.DCEL.Vertices)
        {
            this.ctx.BeginPathAsync();
            this.ctx.ArcAsync(vertex.X, (vertex.Y - M) * -1, 2, 0, 2 * Math.PI, false);
            this.ctx.SetFillStyleAsync("#000000");
            this.ctx.FillAsync();
            this.ctx.StrokeAsync();

            this.ctx.SetFontAsync("14px Segoe UI");
            this.ctx.SetFillStyleAsync("#0000FF");
            this.ctx.FillTextAsync("v" + vertex.Tag, vertex.X + 4, ((vertex.Y - M) * -1) + 4);
        }

        this.ctx.EndBatchAsync();
    }
}
